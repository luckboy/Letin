/****************************************************************************
 *   Copyright (C) 2014 ≈Åukasz Szpakowski.                                  *
 *                                                                          *
 *   This software is licensed under the GNU Lesser General Public          *
 *   License v3 or later. See the LICENSE file and the GPL file for         *
 *   the full licensing terms.                                              *
 ****************************************************************************/
%{
#include <cstddef>
#include <cstdint>
#include <cstring>
#include <sstream>
#include <string>
#include "driver.hpp"
#include "lexer.hpp"

#define YY_USER_ACTION          loc->columns();
%}

%option c++
%option yyclass="letin::comp::impl::Lexer"
%option prefix="LetinCompImpl"

%x COMMENT
%%

%{
  loc->step();
%}

"//"[^\n]* {
}

"/*"                    {
  BEGIN(COMMENT);
}
<COMMENT>"*/" {
  loc->step();
  BEGIN(INITIAL);
}
<COMMENT>[^*\n]+
<COMMENT>"*"
<COMMENT>"\n" {
  loc->lines();
}

"a"[0-9]+ {
  std::istringstream iss(yytext + 1);
  iss >> (lval->size);
  return token::A;
}

"lv"[0-9]+ {
  std::istringstream iss(yytext + 1);
  iss >> (lval->size);
  return token::LV;
}

[+\-]?[1-9][0-9]+ {
  const char *str = (yytext[0] == '+' || yytext[0] == '-') ? yytext + 1 : yytext;
  std::istringstream iss(str);
  iss >> (lval->i);
  if(yytext[0] == '-') lval->i = -lval->i;
  return token::INT;
}

[+\-]?"0"[0-7]+ {
  const char *str = (yytext[0] == '+' || yytext[0] == '-') ? yytext + 1 : yytext;
  std::istringstream iss(str + 1);
  iss >> std::oct >> (lval->i);
  if(yytext[0] == '-') lval->i = -lval->i;
  return token::INT;
}

[+\-]?"0"[Xx][0-9A-Fa-f]+ {
  const char *str = (yytext[0] == '+' || yytext[0] == '-') ? yytext + 1 : yytext;
  std::istringstream iss(str + 2);
  iss >> std::hex >> (lval->i);
  if(yytext[0] == '-') lval->i = -lval->i;
  return token::INT;
}

[+\-]?[0-9]+"."[0-9]*([Ee][+\-]?[0-9]+)? {
  const char *str = (yytext[0] == '+' || yytext[0] == '-') ? yytext + 1 : yytext;
  std::istringstream iss(str);
  iss >> (lval->f);
  if(yytext[0] == '-') lval->f = -lval->f;
  return token::FLOAT;
}

[_A-Za-z\$][_A-Za-z0-9\.\$]+ {
  lval->str = new std::string(yytext);
  return token::INSTR_IDENT;
}

"`"[^\`]+"`" {
  lval->str = new std::string(yytext + 1, std::strlen(yytext) - 2);
  return token::SPECIAL_IDENT;
}

"("|")"|"["|"]"|","|"="|"&" {
  return yytext[0];
}

[ \t\r] {
  loc->step();
}

"\n"+ {
  loc->lines();
  return '\n';
}

%%

int LetinCompImplFlexLexer::yywrap() { return 1; }

namespace letin
{
  namespace comp
  {
    namespace impl
    {
      Lexer::~Lexer() {}
    }
  }
}
