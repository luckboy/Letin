/****************************************************************************
 *   Copyright (C) 2014-2015 ≈Åukasz Szpakowski.                             *
 *                                                                          *
 *   This software is licensed under the GNU Lesser General Public          *
 *   License v3 or later. See the LICENSE file and the GPL file for         *
 *   the full licensing terms.                                              *
 ****************************************************************************/
%skeleton "glr.cc"
%defines
%define api.namespace { letin::comp::impl }
%define parser_class_name { Parser }

%code requires {
#include <cstddef>
#include <cstdint>
#include <iostream>
#include <list>
#include <memory>
#include <letin/comp.hpp>
#include "driver.hpp"
#include "parse_tree.hpp"

#define P(loc)          loc_to_pos(driver.source(), loc)

  namespace letin
  {
    namespace comp
    {
      namespace impl
      {
        class Lexer;
      }
    }
  }
}

%param { letin::comp::impl::Driver &driver }
%param { letin::comp::impl::Lexer &lexer }

%code {
#define yyparse         LetinCompImplparse

  using namespace letin::comp;
  using namespace letin::comp::impl;

  static int yylex(Parser::semantic_type *lval, Parser::location_type *loc, letin::comp::impl::Driver &driver, letin::comp::impl::Lexer &lexer); 

  static Position loc_to_pos(const Source &source, const Parser::location_type &loc);
}

%locations
%initial-action
{
  @$.begin.filename = @$.end.filename = &(driver.file_name());
}

%union {
  std::int64_t i;
  double f;
  std::string *string;
  std::uint32_t u32;
  NumberValue *num_value;
  ArgumentValue *arg_value;
  Value *value;
  Object *object;
  Argument *arg;
  Operation *op;
  Label *label;
  InstructionPair *instr_pair;
  Instruction *instr;
  FunctionLine *fun_line;
  std::shared_ptr<Definition> *def;
  std::shared_ptr<std::list<Value>> *values;
  std::shared_ptr<std::list<FunctionLine>> *fun_lines;  
}

%token                  END             0  
%token <i>              INT
%token <f>              FLOAT
%token <string>         STRING
%token <string>         NAME
%token <string>         IDENT
%token <u32>            LV
%token <u32>            A
%token                  ENTRY
%token                  DEFINE
%token                  INCLUDE
%token                  GLOBAL
%type <string>          ident
%type <num_value>       num_value
%type <arg_value>       arg_value
%type <value>           value
%type <object>          object
%type <arg>             arg
%type <op>              op
%type <label>           label
%type <instr_pair>      instr_pair
%type <instr>           instr
%type <fun_line>        fun_line
%type <def>             fun_def
%type <def>             var_def
%type <def>             entry_def
%type <values>          values
%type <fun_lines>       fun_lines
%type <num_value>       expr

%destructor { delete $$; }      <string>
%destructor { delete $$; }      <num_value>
%destructor { delete $$; }      <arg_value>
%destructor { delete $$; }      <value>
%destructor { delete $$; }      <object>
%destructor { delete $$; }      <arg>
%destructor { delete $$; }      <op>
%destructor { delete $$; }      <label>
%destructor { delete $$; }      <instr_pair>
%destructor { delete $$; }      <instr>
%destructor { delete $$; }      <fun_line>
%destructor { delete $$; }      <def>
%destructor { delete $$; }      <values>
%destructor { delete $$; }      <fun_lines>

%right                  '?'
%left                   ':'
%left                   BARBAR
%left                   AMPAMP
%left                   '|'
%left                   '^'
%left                   '&'
%left                   EQEQ EXEQ
%left                   '<' GTEQ '>' LTEQ
%left                   LTLT GTGT 
%left                   '+' '-'
%left                   '*' '/' '%'
%left                   PLUS NEG NOT LNOT 

%glr-parser

%%

input:
|               input '\n' def
|               input '\n'
|               def
;

def:            fun_def                         { driver.parse_tree().add_def(*$1); }
|               var_def                         { driver.parse_tree().add_def(*$1); }
|               entry_def                       { driver.parse_tree().add_def(*$1); }
|               value_def
|               include
;

fun_def:        ident '(' A ')' '=' onl '{' '\n' fun_lines '\n' '}' {
  $$ = new std::shared_ptr<Definition>(new FunctionDefinition(*$1, Function($3, *$9, P(@1)), P(@1)));
}
|               GLOBAL onl ident '(' A ')' '=' onl '{' '\n' fun_lines '\n' '}' {
  $$ = new std::shared_ptr<Definition>(new FunctionDefinition(GLOBAL, *$3, Function($5, *$11, P(@1)), P(@1)));
}
;

fun_lines:      fun_lines '\n' fun_line         { (*$1)->push_back(*$3); $$ = $1; }
|               fun_line                        {
  $$ = new std::shared_ptr<std::list<FunctionLine>>(new std::list<FunctionLine> { *$1 });
}
;

fun_line:       label ':' instr                 { $$ = new FunctionLine(*$1, *$3); }
|               label ':'                       { $$ = new FunctionLine(*$1); }
|               instr                           { $$ = new FunctionLine(*$1); }
|                                               { $$ = new FunctionLine(); }
;

label:          ident                           { $$ = new Label(*$1, P(@1)); }
;

instr:          instr_pair op arg ',' arg %dprec 2 { $$ = new Instruction(*$1, *$2, *$3, *$5, P(@1)); }
|               instr_pair op arg %dprec 2      { $$ = new Instruction(*$1, *$2, *$3, P(@1)); }
|               instr_pair op '(' arg ',' arg ')' { $$ = new Instruction(*$1, *$2, *$4, *$6, P(@1)); }
|               instr_pair op '(' arg ')' %dprec 3 { $$ = new Instruction(*$1, *$2, *$4, P(@1)); }
|               instr_pair op '(' ')'           { $$ = new Instruction(*$1, *$2, P(@1)); }
|               NAME arg ',' arg %dprec 1       { $$ = new Instruction(*$1, *$2, *$4, P(@1)); }
|               NAME arg %dprec 1               { $$ = new Instruction(*$1, *$2, P(@1)); }
|               NAME                            { $$ = new Instruction(*$1, P(@1)); }
;

instr_pair:     NAME '(' LV ')'                 { $$ = new InstructionPair(*$1, $3); }
|               NAME                            { $$ = new InstructionPair(*$1); }

op:             NAME                            { $$ = new Operation(*$1, P(@1)); }
;

arg:            arg_value %dprec 1              { $$ = new Argument(*$1, P(@1)); }
|               LV                              { $$ = new Argument(LVAR, $1, P(@1)); }
|               A                               { $$ = new Argument(ARG, $1, P(@1)); }
|               ident %dprec 2                  { $$ = new Argument(*$1, P(@1)); }
;

arg_value:      expr                            { $$ = new ArgumentValue(*$1); }
|               '&' ident                       { $$ = new ArgumentValue(*$2); }
;

var_def:        ident '=' onl value             {
  $$ = new std::shared_ptr<Definition>(new VariableDefinition(*$1, *$4, P(@1)));
}
|               GLOBAL onl ident '=' onl value   {
  $$ = new std::shared_ptr<Definition>(new VariableDefinition(GLOBAL, *$3, *$6, P(@1)));
}
;

value:          expr %dprec 2                   { $$ = new Value(*$1, P(@1)); }
|               object %dprec 1                 { $$ = new Value(new Object(*$1), P(@1)); }
|               '&' ident                       { $$ = new Value(*$2, P(@1)); }
;

object:         STRING                          { $$ = new Object(*$1, P(@1)); }
|               NAME '[' onl values onl ']'     { $$ = new Object(*$1, *$4, P(@1)); }
|               '[' onl values onl ']'          { $$ = new Object("iarray64", *$3, P(@1)); }
|               '(' onl values onl ')'          { $$ = new Object("tuple", *$3, P(@1)); }
;

values:         values onl ',' onl value        { (*$1)->push_back(*$5); $$ = $1; }
|               value                           {
  $$ = new std::shared_ptr<std::list<Value>>(new std::list<Value> { *$1 });
}
|                                               {
  $$ = new std::shared_ptr<std::list<Value>>(new std::list<Value>());
}
;

entry_def:      ENTRY ident                     {
  $$ = new std::shared_ptr<Definition>(new EntryDefinition(*$2, P(@1)));
}
;

value_def:      DEFINE ident expr               {
  if(driver.has_value_def(*$2)) {
    yyparser.error(@2, "already defined value " + *$2);
    YYERROR;
  } else
    driver.add_value_def(*$2, *$3);
}
;

include:        INCLUDE STRING                  {
  if(!driver.parse_included_file(*$2)) {
    yyparser.error(@2, "couldn't include file " + *$2);
    YYERROR;
  }
}
;

onl:
|               '\n'
;

ident:          NAME
|               IDENT
;

expr:           '+' expr %prec PLUS             { $$ = $2; }
|               '-' expr %prec NEG              { $$ = new NumberValue(-*$2); }
|               expr '+' expr                   { $$ = new NumberValue(*$1 + *$3); }
|               expr '-' expr                   { $$ = new NumberValue(*$1 - *$3); }
|               expr '*' expr                   { $$ = new NumberValue(*$1 * *$3); }
|               expr '/' expr                   {
  if($1->type() == NumberValue::TYPE_INT && $3->type() == NumberValue::TYPE_INT && $3->i() == 0) {
    yyparser.error(@2, "division by zero");
    YYERROR;
  }
  $$ = new NumberValue(*$1 / *$3);
}
|               expr '%' expr                   {
  if($1->type() == NumberValue::TYPE_INT && $3->type() == NumberValue::TYPE_INT && $3->i() == 0) {
    yyparser.error(@2, "division by zero");
    YYERROR;
  } else
    $$ = new NumberValue(*$1 % *$3);
}
|               '~' expr %prec NOT              { $$ = new NumberValue(~*$2); }
|               expr '&' expr                   { $$ = new NumberValue(*$1 & *$3); } 
|               expr '|' expr                   { $$ = new NumberValue(*$1 | *$3); }
|               expr '^' expr                   { $$ = new NumberValue(*$1 ^ *$3); }
|               expr LTLT expr                  { $$ = new NumberValue(*$1 << *$3); }
|               expr GTGT expr                  { $$ = new NumberValue(*$1 >> *$3); }
|               expr EQEQ expr                  { $$ = new NumberValue(*$1 == *$3); }
|               expr EXEQ expr                  { $$ = new NumberValue(*$1 != *$3); }
|               expr '<' expr                   { $$ = new NumberValue(*$1 < *$3); }
|               expr GTEQ expr                  { $$ = new NumberValue(*$1 >= *$3); }
|               expr '>' expr                   { $$ = new NumberValue(*$1 > *$3); }
|               expr LTEQ expr                  { $$ = new NumberValue(*$1 <= *$3); }
|               '!' expr %prec LNOT             { $$ = new NumberValue(*$2 == 0); }
|               expr AMPAMP expr                { $$ = new NumberValue(*$1 != 0 && *$3 != 0); }
|               expr BARBAR expr                { $$ = new NumberValue(*$1 != 0 || *$3 != 0); }
|               expr '?' expr ':' expr          { $$ = new NumberValue(*$1 != 0 ? *$3 : *$5); }
|               num_value
|               ident                           {
  if(!driver.has_value_def(*$1)) {
    yyparser.error(@1, "undefined value " + *$1);
    YYERROR;
  } else
    $$ = new NumberValue(driver.value_def(*$1));
}
|               '(' expr ')'                    { $$ = $2; }
;

num_value:      INT                             { $$ = new NumberValue($1); }
|               FLOAT                           { $$ = new NumberValue($1); }
;

%%

#include "lexer.hpp"

namespace letin
{
  namespace comp
  {
    namespace impl
    {
      void Parser::error(const location &loc, const std::string &msg)
      { driver.add_error(Error(P(loc), msg)); }
    }
  }
}

static Position loc_to_pos(const Source &source, const Parser::location_type &loc)
{ return Position(source, loc.begin.line, loc.begin.column); }

static int yylex(Parser::semantic_type *lval, Parser::location_type *loc, Driver &driver, Lexer &lexer)
{ return lexer.lex(lval, loc); }
